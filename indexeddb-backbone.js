// Generated by CoffeeScript 1.6.3
(function() {
  var Dir, IndexedDBBackbone, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  IndexedDBBackbone = {
    value: function(object, key) {
      return _.reduce(key.split('.'), (function(obj, key) {
        return obj != null ? obj[key] : void 0;
      }), object);
    },
    getLogger: function(channel) {
      var _ref;
      if (channel) {
        if ((typeof window !== "undefined" && window !== null ? (_ref = window.console) != null ? _ref[channel] : void 0 : void 0) != null) {
          return window.console[channel].bind(window.console);
        } else if ((typeof console !== "undefined" && console !== null ? console[channel] : void 0) != null) {
          return console[channel].bind(console);
        }
      } else {
        return function() {};
      }
    }
  };

  if (typeof exports !== 'undefined') {
    window._ = require('underscore');
    window.Backbone = require('backbone');
  } else {
    window.IndexedDBBackbone = IndexedDBBackbone;
  }

  IndexedDBBackbone.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;

  IndexedDBBackbone.IDBTransaction = {
    READ_WRITE: "readwrite",
    READ_ONLY: "readonly"
  };

  IndexedDBBackbone.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;

  IndexedDBBackbone.IDBCursor = window.mozIDBCursor || window.msIDBCursor || {
    PREV: "prev",
    PREV_NO_DUPLICATE: "prevunique",
    NEXT: "next",
    NEXT_NO_DUPLICATE: "nextunique"
  };

  IndexedDBBackbone.Driver = (function() {
    Driver.db = null;

    Driver.stack = null;

    Driver.state = 'closed';

    function Driver(schema) {
      this.schema = schema;
      this.stack = [];
      this.logger = IndexedDBBackbone.getLogger(this.schema.logChannel());
      this.open();
    }

    Driver.prototype.open = function() {
      var dbRequest, name, version,
        _this = this;
      name = this.schema.id;
      version = this.schema.version();
      this.logger("opening database", name, "in version #", version);
      this.state = 'opening';
      dbRequest = IndexedDBBackbone.indexedDB.open(name);//, version);
      // dbRequest.onupgradeneeded = function(e) {
      //   _this.logger("onupgradeneeded = " + e.oldVersion + " => " + e.newVersion);
      //   return _this.schema.onupgradeneeded(e);
      // };
      dbRequest.onsuccess = function(e) {
        _this.db = e.target.result;
        _this.db.onversionchange = function(e) {
          _this.logger("Database version changes on another tab. Closing this tab's connection.");
          return _this.db.close();
        };
        _this.state = 'open';
        return _this.ready();
      };
      dbRequest.onblocked = function(e) {
        return _this.logger("blocked");
      };
      dbRequest.onerror = function(e) {
        return _this.logger("Couldn't not connect to the database");
      };
      return dbRequest.onabort = function(e) {
        return _this.logger("Connection to the database aborted");
      };
    };

    Driver.prototype.close = function() {
      if (this.db != null) {
        this.state = 'closed';
        this.db.close();
        return this.db = null;
      }
    };

    Driver.prototype.ready = function() {
      var operation, _results;
      _results = [];
      while (operation = this.stack.shift()) {
        _results.push(operation());
      }
      return _results;
    };

    Driver.prototype.execute = function(operation) {
      switch (this.state) {
        case 'closed':
          this.open();
          return this.stack.push(operation);
        case 'opening':
          return this.stack.push(operation);
        case 'open':
          return operation();
      }
    };

    Driver.prototype.begin = function(storeNames, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var error;
        _this._transaction = _this.db.transaction(storeNames, IndexedDBBackbone.IDBTransaction.READ_WRITE);
        if ((options != null ? options.success : void 0) != null) {
          _this._transaction.oncomplete = options.success;
        }
        if ((options != null ? options.abort : void 0) != null) {
          _this._transaction.onabort = options.abort;
        }
        if ((options != null ? options.error : void 0) != null) {
          _this._transaction.onerror = options.error;
        }
        try {
          return options.callback(_this._transaction);
        } catch (_error) {
          error = _error;
          return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
        }
      });
    };

    Driver.prototype.get = function(storeName, object, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.GetOperation(_this.db, storeName, object, options);
        return request.execute();
      });
    };

    Driver.prototype.query = function(storeName, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.Query(_this.db, storeName, options);
        return request.execute();
      });
    };

    Driver.prototype.add = function(storeName, object, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.AddOperation(_this.db, [storeName], object, options);
        return request.execute();
      });
    };

    Driver.prototype.put = function(storeName, object, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.PutOperation(_this.db, [storeName], object, options);
        return request.execute();
      });
    };

    Driver.prototype["delete"] = function(storeName, key, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.DeleteOperation(_this.db, storeName, key, options);
        return request.execute();
      });
    };

    Driver.prototype.clear = function(storeName, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      return this.execute(function() {
        var request;
        request = new IndexedDBBackbone.Driver.ClearOperation(_this.db, storeName, options);
        return request.execute();
      });
    };

    return Driver;

  })();

  IndexedDBBackbone.Driver.Operation = (function() {
    Operation.prototype.mode = IndexedDBBackbone.IDBTransaction.READ_ONLY;

    function Operation(db, storeName, data, options) {
      this.db = db;
      this.data = data;
      this.options = options != null ? options : {};
      this.transaction = this._transaction(storeName);
      this.store = this.transaction.objectStore(storeName);
      this.exclusiveTransaction = !this.options.transaction;
    }

    Operation.prototype._transaction = function(storeName) {
      return this.options.transaction || this.db.transaction([storeName], this.mode);
    };

    Operation.prototype.execute = function() {};

    return Operation;

  })();

  IndexedDBBackbone.Driver.AddOperation = (function(_super) {
    __extends(AddOperation, _super);

    function AddOperation() {
      _ref = AddOperation.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AddOperation.prototype.mode = IndexedDBBackbone.IDBTransaction.READ_WRITE;

    AddOperation.prototype.execute = function() {
      var request,
        _this = this;
      if (this.store.keyPath || this.store.autoIncrement) {
        request = this.store.add(this.data);
      } else {
        request = this.store.add(this.data, this.options.key);
      }
      if (this.exclusiveTransaction) {
        if (this.store.keyPath) {
          request.onsuccess = function(e) {
            return _this.data[_this.store.keyPath] = e.target.result;
          };
        }
        this.transaction.onerror = this.options.error;
        if (this.options.success) {
          return this.transaction.oncomplete = function(e) {
            return _this.options.success(_this.data);
          };
        }
      } else {
        request.onerror = this.options.error;
        return request.onsuccess = function(e) {
          var _base;
          if (_this.store.keyPath) {
            _this.data[_this.store.keyPath] = e.target.result;
          }
          return typeof (_base = _this.options).success === "function" ? _base.success(_this.data) : void 0;
        };
      }
    };

    return AddOperation;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Driver.PutOperation = (function(_super) {
    __extends(PutOperation, _super);

    function PutOperation() {
      _ref1 = PutOperation.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    PutOperation.prototype.mode = IndexedDBBackbone.IDBTransaction.READ_WRITE;

    PutOperation.prototype.execute = function() {
      var request,
        _this = this;
      if (this.store.keyPath || (this.store.autoIncrement && !this.options.key)) {
        request = this.store.put(this.data);
      } else {
        request = this.store.put(this.data, this.options.key);
      }
      if (this.exclusiveTransaction) {
        this.transaction.onerror = this.options.error;
        if (this.options.success) {
          return this.transaction.oncomplete = function(e) {
            return _this.options.success(_this.data);
          };
        }
      } else {
        request.onerror = this.options.error;
        if (this.options.success) {
          return request.onsuccess = function(e) {
            return _this.options.success(_this.data);
          };
        }
      }
    };

    return PutOperation;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Driver.DeleteOperation = (function(_super) {
    __extends(DeleteOperation, _super);

    function DeleteOperation() {
      _ref2 = DeleteOperation.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    DeleteOperation.prototype.mode = IndexedDBBackbone.IDBTransaction.READ_WRITE;

    DeleteOperation.prototype.execute = function() {
      var request,
        _this = this;
      request = this.store["delete"](this.data);
      if (this.exclusiveTransaction) {
        this.transaction.onerror = this.options.error;
        if (this.options.success) {
          return this.transaction.oncomplete = function(e) {
            return _this.options.success(_this.data);
          };
        }
      } else {
        request.onerror = this.options.error;
        if (this.options.success) {
          return request.onsuccess = function(e) {
            return _this.options.success(_this.data);
          };
        }
      }
    };

    return DeleteOperation;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Driver.ClearOperation = (function(_super) {
    __extends(ClearOperation, _super);

    ClearOperation.prototype.mode = IndexedDBBackbone.IDBTransaction.READ_WRITE;

    function ClearOperation(db, storeName, options) {
      ClearOperation.__super__.constructor.call(this, db, storeName, null, options);
    }

    ClearOperation.prototype.execute = function() {
      var request;
      request = this.store.clear();
      if (this.exclusiveTransaction) {
        this.transaction.oncomplete = this.options.success;
        return this.transaction.onerror = this.options.error;
      } else {
        request.onsuccess = this.options.success;
        return request.onerror = this.options.error;
      }
    };

    return ClearOperation;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Driver.GetOperation = (function(_super) {
    __extends(GetOperation, _super);

    function GetOperation() {
      _ref3 = GetOperation.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    GetOperation.prototype.execute = function() {
      var getRequest, index, indexName, keyPath, value, _base,
        _this = this;
      if (this.store.keyPath && (value = IndexedDBBackbone.value(this.data, this.store.keyPath))) {
        getRequest = this.store.get(value);
      } else if (indexName = this.options.indexName) {
        index = this.store.index(indexName);
        keyPath = index.keyPath;
        value = IndexedDBBackbone.value(this.data, keyPath);
        if (value) {
          getRequest = index.get(value);
        }
      }
      if (getRequest) {
        getRequest.onsuccess = function(e) {
          var _base, _base1;
          if (e.target.result) {
            return typeof (_base = _this.options).success === "function" ? _base.success(e.target.result) : void 0;
          } else {
            return typeof (_base1 = _this.options).error === "function" ? _base1.error("Not Found") : void 0;
          }
        };
        return getRequest.onerror = this.options.error;
      } else {
        return typeof (_base = this.options).error === "function" ? _base.error("Couldn't search: no index matches the provided model data") : void 0;
      }
    };

    return GetOperation;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Driver.Query = (function(_super) {
    __extends(Query, _super);

    function Query(db, storeName, options) {
      Query.__super__.constructor.call(this, db, storeName, null, options);
    }

    Query.prototype.execute = function() {
      var cursorRequest, elements, needsAdvancement, options, query, range, source;
      options = this.options;
      query = options.query;
      elements = [];
      needsAdvancement = query._offset > 0;
      source = query._indexName ? this.store.index(query._indexName) : this.store;
      range = query.getKeyRange();
      cursorRequest = source.openCursor(range, query.getDirection());
      cursorRequest.onerror = function(e) {
        return options.error("cursorRequest error", e);
      };
      return cursorRequest.onsuccess = function(e) {
        var cursor;
        if (cursor = e.target.result) {
          if (needsAdvancement) {
            needsAdvancement = false;
            return cursor.advance(query._offset);
          } else {
            elements.push(cursor.value);
            if (query._limit && elements.length >= query._limit) {
              return typeof options.success === "function" ? options.success(elements) : void 0;
            } else {
              return cursor["continue"]();
            }
          }
        } else {
          return typeof options.success === "function" ? options.success(elements) : void 0;
        }
      };
    };

    return Query;

  })(IndexedDBBackbone.Driver.Operation);

  IndexedDBBackbone.Databases = {};

  IndexedDBBackbone._schemas = {};

  IndexedDBBackbone.describe = function(dbName) {
    return IndexedDBBackbone._schemas[dbName] = IndexedDBBackbone.IDBSchema.describe(dbName);
  };

  IndexedDBBackbone._getDriver = function(databaseName) {
    var Databases, schema, _name;
    Databases = IndexedDBBackbone.Databases;
    schema = IndexedDBBackbone._schemas[databaseName];
    if (Databases[schema.id]) {
      if (Databases[schema.id].version < schema.version()) {
        Databases[schema.id].close();
        delete Databases[schema.id];
      }
    }
    return Databases[_name = schema.id] || (Databases[_name] = new IndexedDBBackbone.Driver(schema));
  };

  IndexedDBBackbone.sync = function(method, object, options) {
    var dbName, id, objects, storeNames;
    switch (method) {
      case "closeall":
        _.each(IndexedDBBackbone.Databases, function(database) {
          return database.close();
        });
        return IndexedDBBackbone.Databases = {};
      case "begin":
        if (object instanceof Array) {
          objects = object;
        } else {
          objects = [object];
        }
        dbName = objects[0].database;
        storeNames = _.chain(objects).map(function(obj) {
          return obj.storeName;
        }).uniq().value();
        return IndexedDBBackbone._getDriver(dbName).begin(storeNames, options);
      case "read":
        if (object instanceof Backbone.Model) {
          return IndexedDBBackbone._getDriver(object.database).get(object.storeName, object.toJSON(), options);
        } else {
          options = _.extend({}, {
            query: object._idbQuery || new IndexedDBBackbone.IDBQuery(object.storeName)
          }, options);
          return IndexedDBBackbone._getDriver(object.database).query(object.storeName, options);
        }
        break;
      case "create":
      case "update":
        if (method === "create") {
          method = "add";
        } else {
          method = "put";
        }
        options = _.extend({}, options, {
          key: object.id
        });
        return IndexedDBBackbone._getDriver(object.database)[method](object.storeName, object.toJSON(), options);
      case "delete":
        if (id = object.id || object.cid) {
          return IndexedDBBackbone._getDriver(object.database)["delete"](object.storeName, id, options);
        } else {
          return IndexedDBBackbone._getDriver(object.database).clear(object.storeName, options);
        }
        break;
      default:
        return this.logger("Unhandled sync method:", method);
    }
  };

  if (typeof exports === 'undefined') {
    Backbone.ajaxSync = Backbone.sync;
    Backbone.sync = IndexedDBBackbone.sync;
  } else {
    exports.sync = IndexedDBBackbone.sync;
  }

  IndexedDBBackbone.IDBSchema = (function() {
    IDBSchema.prototype._logChannel = false;

    IDBSchema.describe = function(id) {
      return new this(id);
    };

    function IDBSchema(id) {
      this.id = id;
      this.onupgradeneeded = __bind(this.onupgradeneeded, this);
      this.migrations = [];
    }

    IDBSchema.prototype.migrate = function(migration) {
      this.migrations.push(migration);
      return this;
    };

    IDBSchema.prototype.createStore = function(name, options) {
      return this.migrate(function(transaction) {
        return transaction.db.createObjectStore(name, options);
      });
    };

    IDBSchema.prototype.deleteStore = function(name) {
      return this.migrate(function(transaction) {
        return transaction.db.deleteObjectStore(name);
      });
    };

    IDBSchema.prototype.createIndex = function(store, name, keyPath, options) {
      return this.migrate(function(transaction) {
        store = transaction.objectStore(store);
        return store.createIndex(name, keyPath, options);
      });
    };

    IDBSchema.prototype.deleteIndex = function(store, name) {
      return this.migrate(function(transaction) {
        store = transaction.objectStore(store);
        return store.deleteIndex(name);
      });
    };

    IDBSchema.prototype.onupgradeneeded = function(e) {
      var migration, transaction, _i, _len, _ref4, _results;
      transaction = e.target.transaction;
      _ref4 = this.migrations.slice(e.oldVersion, e.newVersion);
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        migration = _ref4[_i];
        _results.push(migration(transaction));
      }
      return _results;
    };

    IDBSchema.prototype.version = function() {
      return this.migrations.length;
    };

    IDBSchema.prototype.logChannel = function(value) {
      if (value !== void 0) {
        return this._logChannel = value;
      } else {
        return this._logChannel;
      }
    };

    return IDBSchema;

  })();
  IndexedDBBackbone.describe('airdrilling');

  IndexedDBBackbone.transaction = function(objects, callback, options) {
    var indexedDB;
    if (options == null) {
      options = {};
    }
    indexedDB = IndexedDBBackbone.indexedDB;
    options.callback = callback;
    return IndexedDBBackbone.sync('begin', objects, options);
  };

  Backbone.transaction = IndexedDBBackbone.transaction;

  Dir = IndexedDBBackbone.IDBCursor;

  IndexedDBBackbone.IDBQuery = (function() {
    IDBQuery.prototype._storeName = null;

    IDBQuery.prototype._indexName = null;

    IDBQuery.prototype._offset = 0;

    IDBQuery.prototype._limit = null;

    IDBQuery.prototype._asc = true;

    IDBQuery.prototype._unique = false;

    IDBQuery.prototype._lower = null;

    IDBQuery.prototype._upper = null;

    IDBQuery.prototype._lowerOpen = false;

    IDBQuery.prototype._upperOpen = false;

    function IDBQuery(_storeName, _indexName) {
      this._storeName = _storeName;
      this._indexName = _indexName != null ? _indexName : null;
    }

    IDBQuery.prototype.limit = function(_limit) {
      this._limit = _limit;
      return this;
    };

    IDBQuery.prototype.offset = function(_offset) {
      this._offset = _offset;
      return this;
    };

    IDBQuery.prototype.lowerBound = function(_lower, _lowerOpen) {
      this._lower = _lower;
      this._lowerOpen = _lowerOpen != null ? _lowerOpen : false;
      return this;
    };

    IDBQuery.prototype.upperBound = function(_upper, _upperOpen) {
      this._upper = _upper;
      this._upperOpen = _upperOpen != null ? _upperOpen : false;
      return this;
    };

    IDBQuery.prototype.bounds = function(_lower, _upper, _lowerOpen, _upperOpen) {
      this._lower = _lower;
      this._upper = _upper;
      this._lowerOpen = _lowerOpen != null ? _lowerOpen : false;
      this._upperOpen = _upperOpen != null ? _upperOpen : false;
      return this;
    };

    IDBQuery.prototype.only = function(value) {
      this._lower = value;
      this._upper = value;
      this._lowerOpen = false;
      this._upperOpen = false;
      return this;
    };

    IDBQuery.prototype.asc = function() {
      this._asc = true;
      return this;
    };

    IDBQuery.prototype.desc = function() {
      this._asc = false;
      return this;
    };

    IDBQuery.prototype.unique = function(_unique) {
      this._unique = _unique != null ? _unique : true;
      return this;
    };

    IDBQuery.prototype.getKeyRange = function() {
      if ((this._lower != null) && (this._upper != null)) {
        return IndexedDBBackbone.IDBKeyRange.bound(this._lower, this._upper, this._lowerOpen, this._upperOpen);
      } else if (this._lower != null) {
        return IndexedDBBackbone.IDBKeyRange.lowerBound(this._lower, this._lowerOpen);
      } else if (this._upper != null) {
        return IndexedDBBackbone.IDBKeyRange.upperBound(this._upper, this._upperOpen);
      } else {
        return null;
      }
    };

    IDBQuery.prototype.getDirection = function() {
      if (this._asc) {
        if (this._unique) {
          return Dir.NEXT_NO_DUPLICATE;
        } else {
          return Dir.NEXT;
        }
      } else {
        if (this._unique) {
          return Dir.PREV_NO_DUPLICATE;
        } else {
          return Dir.PREV;
        }
      }
    };

    return IDBQuery;

  })();

}).call(this);
